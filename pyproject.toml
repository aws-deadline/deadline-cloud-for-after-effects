[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"

[project]
name = "deadline-cloud-for-after-effects"
authors = [
  {name = "Amazon Web Services"},
]
description = "AWS Deadline Cloud for After Effects"
dynamic = ["version"]
readme = "README.md"
license = "Apache-2.0"
requires-python = ">=3.9"
# https://pypi.org/classifiers/
classifiers = [
  "Development Status :: 3 - Alpha",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Operating System :: Microsoft :: Windows",
  "Operating System :: MacOS",
  "License :: OSI Approved :: Apache Software License",
  "Intended Audience :: Developers",
  "Intended Audience :: End Users/Desktop",
]

dependencies = [
  "deadline == 0.48.*",
  "openjd-adaptor-runtime == 0.7.*"
]

[project.scripts]
afterfx-openjd = "deadline.ae_adaptor.AEAdaptor:main"

[project.urls]
Homepage = "https://github.com/aws-deadline/deadline-cloud-for-after-effects"
Source = "https://github.com/aws-deadline/deadline-cloud-for-after-effects"

# --- HATCH ---

[tool.hatch.build]
artifacts = ["*_version.py"]

[tool.hatch.version]
source = "vcs"

[tool.hatch.version.raw-options]
version_scheme = "post-release"

[tool.hatch.build.hooks.vcs]
version-file = "_version.py"

[tool.hatch.build.hooks.custom]
path = "hatch_custom_hook.py"
jsx_version_path = "src/deadline/ae_submitter/DeadlineVersionRequirement.jsx"
# The minimum deadline library required for the AE submitter's CLI calls
jsx_version_minimum = [0, 40, 0]

[tool.hatch.build.hooks.custom.copy_version_py]
destinations = [
  "src/deadline/ae_adaptor"
]

[tool.hatch.build.targets.sdist]
include = ["src/deadline/ae_adaptor/*", "hatch_custom_hook.py"]

[tool.hatch.build.targets.wheel]
packages = ["src/deadline/ae_adaptor"]

# --- MYPY ---

[tool.mypy]
python_version = "3.9"
check_untyped_defs = true
show_error_codes = true
pretty = true
files = [ "src/**/*.py" ]
ignore_missing_imports = true
# Tell mypy that there's a namespace package at src/deadline
namespace_packages = true
explicit_package_bases = true
mypy_path = "src"

# [[tool.mypy.overrides]]
# module = ["PySide2.*"]

# --- RUFF / BLACK ---

[tool.ruff]
line-length = 100

[tool.ruff.lint]
ignore = ["E501"]

[tool.ruff.lint.isort]
known-first-party = ["deadline", "openjd"]

[tool.black]
line-length = 100

# --- PYTEST ---

[tool.pytest.ini_options]
xfail_strict = true
addopts = [
    "--durations=5",
    "--cov=src/deadline/ae_adaptor",
    "--color=yes",
    "--cov-report=html:build/coverage",
    "--cov-report=xml:build/coverage/coverage.xml",
    "--cov-report=term-missing",
    "--numprocesses=auto",
]
testpaths = [ "test" ]
looponfailroots = [
    "src",
    "test",
]
# looponfailroots is deprecated, this removes the deprecation from the test output
filterwarnings = [
    "ignore::DeprecationWarning"
]

# --- COVERAGE ---

[tool.coverage.run]
source_pkgs = [ "deadline/ae_adaptor" ]
branch = true
parallel = true
omit = [
  "**/__main__.py",
  "**/_version.py"
]

[tool.coverage.paths]
source = [
  "src/"
]

[tool.coverage.report]
show_missing = true

[tool.semantic_release]
# Can be removed or set to true once we are v1
major_on_zero = false
tag_format = "{version}"

[tool.semantic_release.commit_parser_options]
allowed_tags = [
    "build",
    "chore",
    "ci",
    "docs",
    "feat",
    "fix",
    "perf",
    "style",
    "refactor",
    "test",
]
minor_tags = []
patch_tags = [
  "chore",
  "feat",
  "fix",
  "refactor",
]

[tool.semantic_release.publish]
upload_to_vcs_release = false

[tool.semantic_release.changelog]
template_dir = ".semantic_release"

[tool.semantic_release.changelog.environment]
trim_blocks = true
lstrip_blocks = true

[tool.semantic_release.branches.release]
match = "(mainline|release)"
